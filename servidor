#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
from platform import system


def log(msg, *args, **kwargs):
    print('[LOG]::', msg, *args, **kwargs)


MSG_TERMINATOR = b'\n' if system() == 'Darwin' else b'\r\n'

LIST_OF_CONNS = {} # holds dangling messages


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def msg(txt):
    return bytes(txt, 'utf-8') + MSG_TERMINATOR


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def get_full_msg(conexao, dados):
    # Garante que a msgm esta completa
    if id(conexao) not in LIST_OF_CONNS:
        log(id(conexao), 'created in table')
        LIST_OF_CONNS[id(conexao)] = b''

    if not dados.endswith(MSG_TERMINATOR):
        LIST_OF_CONNS[id(conexao)] += dados
        return

    dados = LIST_OF_CONNS[id(conexao)] + dados
    del LIST_OF_CONNS[id(conexao)]
    log(id(conexao), 'deleted in table')

    return (conexao, dados[:-len(MSG_TERMINATOR)])


def dados_recebidos(conexao, dados):

    conexao, dados = get_full_msg(conexao, dados)

    try:
        cmd, payload = dados.split(b' ', 1)
    except:
        cmd, payload = dados.split(b' ', 1)[0], None

    cmd = cmd.upper()


    if dados == b'':
        return sair(conexao)

    if cmd == b'PING':
        conexao.enviar(b':server PONG server:' + payload)

    if cmd == b'NICK':
        if not validar_nome(payload):
            return conexao.enviar(msg(f'server 432 apelido_atual {payload.decode("utf-8")} :Erroneous nickname'))

        conexao.enviar(msg(f':server 001 {payload.decode("utf-8")} :Welcome'))
        conexao.enviar(msg(f':server 422 {payload.decode("utf-8")} :MOTD File is missing'))

    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
